/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.itxiop.transport.infrastructure.apirest;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-29T01:42:04.549076500+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Shipments", description = "Shipment operation endpoints")
public interface ShipmentsApi {

    /**
     * GET /shipment/_shipmentId_param_ : Get global information about a concrete shipment
     * Retrieve information related to a shipment using the shipment identifier Collects data about the truck details, location stops and loaded packages
     *
     * @return Successful operation (status code 200)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "getShipment",
        summary = "Get global information about a concrete shipment",
        description = "Retrieve information related to a shipment using the shipment identifier Collects data about the truck details, location stops and loaded packages",
        tags = { "Shipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "text/csv", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shipment/_shipmentId_param_",
        produces = { "application/json", "application/xml", "text/csv" }
    )
    
    ResponseEntity<Object> getShipment(
        
    );


    /**
     * POST /shipments/process : Endpoint to process pending shipments
     * Dijkstra algorithm to process pending shipments and calculate the best route
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "processPendingShipments",
        summary = "Endpoint to process pending shipments",
        description = "Dijkstra algorithm to process pending shipments and calculate the best route",
        tags = { "Shipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/shipments/process"
    )
    
    ResponseEntity<Void> processPendingShipments(
        
    );


    /**
     * DELETE /shipments : Endpoint to purge shipments just processed (status DISCARDED or PLANNED)
     * Endpoint to purge shipments just processed (status DISCARDED or PLANNED). PENDING shipments will not be deleted
     *
     * @return Successful operation (status code 200)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "purgeShipments",
        summary = "Endpoint to purge shipments just processed (status DISCARDED or PLANNED)",
        description = "Endpoint to purge shipments just processed (status DISCARDED or PLANNED). PENDING shipments will not be deleted",
        tags = { "Shipments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/shipments"
    )
    
    ResponseEntity<Void> purgeShipments(
        
    );

}
